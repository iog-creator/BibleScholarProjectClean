2025-06-09 15:31:36,419 - INFO - MCP Request: {'method': 'tools/list', 'jsonrpc': '2.0', 'id': 5}
2025-06-09 15:31:36,420 - INFO - MCP Response: {'jsonrpc': '2.0', 'id': 5, 'result': {'tools': [{'name': 'check_ports', 'description': 'Execute check_ports tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'terminate_processes', 'description': 'Execute terminate_processes tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'verify_data', 'description': 'Execute verify_data tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'run_query', 'description': 'Execute run_query tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'suggest_incremental_change', 'description': 'Execute suggest_incremental_change tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'run_test', 'description': 'Execute run_test tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'get_file_context', 'description': 'Execute get_file_context tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'update_docs', 'description': 'Execute update_docs tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'log_action', 'description': 'Execute log_action tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'normalize_reference', 'description': 'Execute normalize_reference tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_etl_guidelines', 'description': 'Execute enforce_etl_guidelines tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'check_pandas_nulls', 'description': 'Execute check_pandas_nulls tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_pandas_types', 'description': 'Execute enforce_pandas_types tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'validate_tvtms_counts', 'description': 'Execute validate_tvtms_counts tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'check_tvtms_format', 'description': 'Execute check_tvtms_format tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'validate_json_schema', 'description': 'Execute validate_json_schema tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'semantic_search', 'description': 'Execute semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'list_lmstudio_models', 'description': 'Execute list_lmstudio_models tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_canonical_database', 'description': 'Execute enforce_rule_canonical_database tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_comprehensive_semantic_search', 'description': 'Execute enforce_rule_comprehensive_semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_database_access', 'description': 'Execute enforce_rule_database_access tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_db_test_skip', 'description': 'Execute enforce_rule_db_test_skip tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_debug_hebrew_ot_words', 'description': 'Execute enforce_rule_debug_hebrew_ot_words tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_system', 'description': 'Execute enforce_rule_documentation_system tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_usage', 'description': 'Execute enforce_rule_documentation_usage tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_dspy_guidelines', 'description': 'Execute enforce_rule_dspy_guidelines tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_environment_activation', 'description': 'Execute enforce_rule_environment_activation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_esv_bible_processing', 'description': 'Execute enforce_rule_esv_bible_processing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_parser_strictness', 'description': 'Execute enforce_rule_etl_parser_strictness tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_rules', 'description': 'Execute enforce_rule_etl_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_greek_morphology_count_tolerance', 'description': 'Execute enforce_rule_greek_morphology_count_tolerance tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_hebrew_rules', 'description': 'Execute enforce_rule_hebrew_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_langchain_bible_integration', 'description': 'Execute enforce_rule_langchain_bible_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lexicon_validation', 'description': 'Execute enforce_rule_lexicon_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_integration', 'description': 'Execute enforce_rule_lm_studio_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_logging_and_error_handling', 'description': 'Execute enforce_rule_logging_and_error_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_logging_standards', 'description': 'Execute enforce_rule_logging_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_mcp_rule_integration', 'description': 'Execute enforce_rule_mcp_rule_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_model_validation', 'description': 'Execute enforce_rule_model_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pandas_dataframe_type_enforcement', 'description': 'Execute enforce_rule_pandas_dataframe_type_enforcement tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pandas_null_handling', 'description': 'Execute enforce_rule_pandas_null_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_path_standards', 'description': 'Execute enforce_rule_path_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pgvector_semantic_search', 'description': 'Execute enforce_rule_pgvector_semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_port_configuration', 'description': 'Execute enforce_rule_port_configuration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_psycopg3_only', 'description': 'Execute enforce_rule_psycopg3_only tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_public_domain_bible_processing', 'description': 'Execute enforce_rule_public_domain_bible_processing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_public_domain_bible_processing_new', 'description': 'Execute enforce_rule_public_domain_bible_processing_new tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_creation_guide', 'description': 'Execute enforce_rule_rule_creation_guide tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_management', 'description': 'Execute enforce_rule_rule_management tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_pruning', 'description': 'Execute enforce_rule_rule_pruning tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_template', 'description': 'Execute enforce_rule_rule_template tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_single-source-of-truth', 'description': 'Execute enforce_rule_single-source-of-truth tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_theological_terms', 'description': 'Execute enforce_rule_theological_terms tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_translation_validation', 'description': 'Execute enforce_rule_translation_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_database_handling', 'description': 'Execute enforce_rule_tvtms_database_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_expected_count', 'description': 'Execute enforce_rule_tvtms_expected_count tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_parser_fixes', 'description': 'Execute enforce_rule_tvtms_parser_fixes tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_txt_only', 'description': 'Execute enforce_rule_tvtms_txt_only tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_validate_data_types', 'description': 'Execute enforce_rule_validate_data_types tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_when_to_create_rules', 'description': 'Execute enforce_rule_when_to_create_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_windows_batch_path_consistency', 'description': 'Execute enforce_rule_windows_batch_path_consistency tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_windows_python_utf8_fix', 'description': 'Execute enforce_rule_windows_python_utf8_fix tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_cursor_rules', 'description': 'Execute enforce_rule_cursor_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_README', 'description': 'Execute enforce_rule_README tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_auto_list_lmstudio_models_20250531_175420', 'description': 'Execute enforce_rule_auto_list_lmstudio_models_20250531_175420 tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_auto_list_lmstudio_models_20250531_181145', 'description': 'Execute enforce_rule_auto_list_lmstudio_models_20250531_181145 tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_bible_translations', 'description': 'Execute enforce_rule_bible_translations tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_integration', 'description': 'Execute enforce_rule_contextual_insights_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_optimization', 'description': 'Execute enforce_rule_contextual_insights_optimization tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_testing', 'description': 'Execute enforce_rule_contextual_insights_testing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_dspy_mlflow_integration', 'description': 'Execute enforce_rule_dspy_mlflow_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_pipeline', 'description': 'Execute enforce_rule_etl_pipeline tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_huggingface_dspy_integration', 'description': 'Execute enforce_rule_huggingface_dspy_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_dspy_json_schema_integration', 'description': 'Execute enforce_rule_lm_studio_dspy_json_schema_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_translation_variants', 'description': 'Execute enforce_rule_translation_variants tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_vector_search_server', 'description': 'Execute enforce_rule_vector_search_server tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_api_standards', 'description': 'Execute enforce_rule_api_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_maintenance', 'description': 'Execute enforce_rule_documentation_maintenance tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_dspy_integration', 'description': 'Execute enforce_rule_lm_studio_dspy_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_parser_strictness', 'description': 'Execute enforce_rule_parser_strictness tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_ai_response_protocol', 'description': 'Execute enforce_rule_ai_response_protocol tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_server_startup_consistency', 'description': 'Execute enforce_rule_server_startup_consistency tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}]}}
2025-06-09 15:31:36,421 - INFO - MCP Request: {'method': 'tools/list', 'jsonrpc': '2.0', 'id': 6}
2025-06-09 15:31:36,421 - INFO - MCP Response: {'jsonrpc': '2.0', 'id': 6, 'result': {'tools': [{'name': 'check_ports', 'description': 'Execute check_ports tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'terminate_processes', 'description': 'Execute terminate_processes tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'verify_data', 'description': 'Execute verify_data tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'run_query', 'description': 'Execute run_query tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'suggest_incremental_change', 'description': 'Execute suggest_incremental_change tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'run_test', 'description': 'Execute run_test tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'get_file_context', 'description': 'Execute get_file_context tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'update_docs', 'description': 'Execute update_docs tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'log_action', 'description': 'Execute log_action tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'normalize_reference', 'description': 'Execute normalize_reference tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_etl_guidelines', 'description': 'Execute enforce_etl_guidelines tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'check_pandas_nulls', 'description': 'Execute check_pandas_nulls tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_pandas_types', 'description': 'Execute enforce_pandas_types tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'validate_tvtms_counts', 'description': 'Execute validate_tvtms_counts tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'check_tvtms_format', 'description': 'Execute check_tvtms_format tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'validate_json_schema', 'description': 'Execute validate_json_schema tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'semantic_search', 'description': 'Execute semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'list_lmstudio_models', 'description': 'Execute list_lmstudio_models tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_canonical_database', 'description': 'Execute enforce_rule_canonical_database tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_comprehensive_semantic_search', 'description': 'Execute enforce_rule_comprehensive_semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_database_access', 'description': 'Execute enforce_rule_database_access tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_db_test_skip', 'description': 'Execute enforce_rule_db_test_skip tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_debug_hebrew_ot_words', 'description': 'Execute enforce_rule_debug_hebrew_ot_words tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_system', 'description': 'Execute enforce_rule_documentation_system tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_usage', 'description': 'Execute enforce_rule_documentation_usage tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_dspy_guidelines', 'description': 'Execute enforce_rule_dspy_guidelines tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_environment_activation', 'description': 'Execute enforce_rule_environment_activation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_esv_bible_processing', 'description': 'Execute enforce_rule_esv_bible_processing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_parser_strictness', 'description': 'Execute enforce_rule_etl_parser_strictness tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_rules', 'description': 'Execute enforce_rule_etl_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_greek_morphology_count_tolerance', 'description': 'Execute enforce_rule_greek_morphology_count_tolerance tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_hebrew_rules', 'description': 'Execute enforce_rule_hebrew_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_langchain_bible_integration', 'description': 'Execute enforce_rule_langchain_bible_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lexicon_validation', 'description': 'Execute enforce_rule_lexicon_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_integration', 'description': 'Execute enforce_rule_lm_studio_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_logging_and_error_handling', 'description': 'Execute enforce_rule_logging_and_error_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_logging_standards', 'description': 'Execute enforce_rule_logging_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_mcp_rule_integration', 'description': 'Execute enforce_rule_mcp_rule_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_model_validation', 'description': 'Execute enforce_rule_model_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pandas_dataframe_type_enforcement', 'description': 'Execute enforce_rule_pandas_dataframe_type_enforcement tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pandas_null_handling', 'description': 'Execute enforce_rule_pandas_null_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_path_standards', 'description': 'Execute enforce_rule_path_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pgvector_semantic_search', 'description': 'Execute enforce_rule_pgvector_semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_port_configuration', 'description': 'Execute enforce_rule_port_configuration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_psycopg3_only', 'description': 'Execute enforce_rule_psycopg3_only tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_public_domain_bible_processing', 'description': 'Execute enforce_rule_public_domain_bible_processing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_public_domain_bible_processing_new', 'description': 'Execute enforce_rule_public_domain_bible_processing_new tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_creation_guide', 'description': 'Execute enforce_rule_rule_creation_guide tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_management', 'description': 'Execute enforce_rule_rule_management tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_pruning', 'description': 'Execute enforce_rule_rule_pruning tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_template', 'description': 'Execute enforce_rule_rule_template tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_single-source-of-truth', 'description': 'Execute enforce_rule_single-source-of-truth tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_theological_terms', 'description': 'Execute enforce_rule_theological_terms tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_translation_validation', 'description': 'Execute enforce_rule_translation_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_database_handling', 'description': 'Execute enforce_rule_tvtms_database_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_expected_count', 'description': 'Execute enforce_rule_tvtms_expected_count tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_parser_fixes', 'description': 'Execute enforce_rule_tvtms_parser_fixes tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_txt_only', 'description': 'Execute enforce_rule_tvtms_txt_only tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_validate_data_types', 'description': 'Execute enforce_rule_validate_data_types tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_when_to_create_rules', 'description': 'Execute enforce_rule_when_to_create_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_windows_batch_path_consistency', 'description': 'Execute enforce_rule_windows_batch_path_consistency tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_windows_python_utf8_fix', 'description': 'Execute enforce_rule_windows_python_utf8_fix tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_cursor_rules', 'description': 'Execute enforce_rule_cursor_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_README', 'description': 'Execute enforce_rule_README tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_auto_list_lmstudio_models_20250531_175420', 'description': 'Execute enforce_rule_auto_list_lmstudio_models_20250531_175420 tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_auto_list_lmstudio_models_20250531_181145', 'description': 'Execute enforce_rule_auto_list_lmstudio_models_20250531_181145 tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_bible_translations', 'description': 'Execute enforce_rule_bible_translations tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_integration', 'description': 'Execute enforce_rule_contextual_insights_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_optimization', 'description': 'Execute enforce_rule_contextual_insights_optimization tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_testing', 'description': 'Execute enforce_rule_contextual_insights_testing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_dspy_mlflow_integration', 'description': 'Execute enforce_rule_dspy_mlflow_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_pipeline', 'description': 'Execute enforce_rule_etl_pipeline tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_huggingface_dspy_integration', 'description': 'Execute enforce_rule_huggingface_dspy_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_dspy_json_schema_integration', 'description': 'Execute enforce_rule_lm_studio_dspy_json_schema_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_translation_variants', 'description': 'Execute enforce_rule_translation_variants tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_vector_search_server', 'description': 'Execute enforce_rule_vector_search_server tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_api_standards', 'description': 'Execute enforce_rule_api_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_maintenance', 'description': 'Execute enforce_rule_documentation_maintenance tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_dspy_integration', 'description': 'Execute enforce_rule_lm_studio_dspy_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_parser_strictness', 'description': 'Execute enforce_rule_parser_strictness tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_ai_response_protocol', 'description': 'Execute enforce_rule_ai_response_protocol tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_server_startup_consistency', 'description': 'Execute enforce_rule_server_startup_consistency tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}]}}
2025-06-09 15:32:19,979 - INFO - MCP SERVER: Starting up...
2025-06-09 15:32:19,979 - INFO - MCP SERVER DEBUG MARKER: scripts/mcp_server.py loaded
2025-06-09 15:32:20,002 - INFO - Database connection established.
2025-06-09 15:32:20,003 - INFO - Loading rules from C:\Users\mccoy\Documents\Projects\Projects\CursorMCPWorkspace\.cursor\rules
2025-06-09 15:32:20,012 - INFO - Loaded 123 rules from C:\Users\mccoy\Documents\Projects\Projects\CursorMCPWorkspace\.cursor\rules
2025-06-09 15:32:20,012 - INFO - Loaded 123 rules at startup: ['canonical_database', 'comprehensive_semantic_search', 'database_access', 'db_test_skip', 'debug_hebrew_ot_words', 'documentation_system', 'documentation_usage', 'dspy_guidelines', 'environment_activation', 'esv_bible_processing', 'etl_parser_strictness', 'etl_rules', 'greek_morphology_count_tolerance', 'hebrew_rules', 'langchain_bible_integration', 'lexicon_validation', 'lm_studio_integration', 'logging_and_error_handling', 'logging_standards', 'mcp_rule_integration', 'model_validation', 'pandas_dataframe_type_enforcement', 'pandas_null_handling', 'path_standards', 'pgvector_semantic_search', 'port_configuration', 'psycopg3_only', 'public_domain_bible_processing', 'public_domain_bible_processing_new', 'rule_creation_guide', 'rule_management', 'rule_pruning', 'rule_template', 'single-source-of-truth', 'theological_terms', 'translation_validation', 'tvtms_database_handling', 'tvtms_expected_count', 'tvtms_parser_fixes', 'tvtms_txt_only', 'validate_data_types', 'when_to_create_rules', 'windows_batch_path_consistency', 'windows_python_utf8_fix', 'cursor_rules', 'documentation_usage', 'dspy_guidelines', 'README', 'rule_creation_guide', 'canonical_database', 'comprehensive_semantic_search', 'database_access', 'db_test_skip', 'debug_hebrew_ot_words', 'documentation_system', 'documentation_usage', 'dspy_guidelines', 'environment_activation', 'esv_bible_processing', 'etl_parser_strictness', 'etl_rules', 'greek_morphology_count_tolerance', 'hebrew_rules', 'langchain_bible_integration', 'lexicon_validation', 'lm_studio_integration', 'logging_and_error_handling', 'logging_standards', 'mcp_rule_integration', 'model_validation', 'pandas_dataframe_type_enforcement', 'pandas_null_handling', 'path_standards', 'pgvector_semantic_search', 'port_configuration', 'psycopg3_only', 'public_domain_bible_processing', 'public_domain_bible_processing_new', 'rule_creation_guide', 'rule_management', 'rule_pruning', 'rule_template', 'single-source-of-truth', 'theological_terms', 'translation_validation', 'tvtms_database_handling', 'tvtms_expected_count', 'tvtms_parser_fixes', 'tvtms_txt_only', 'validate_data_types', 'when_to_create_rules', 'windows_batch_path_consistency', 'windows_python_utf8_fix', 'cursor_rules', 'documentation_usage', 'dspy_guidelines', 'README', 'rule_creation_guide', 'auto_list_lmstudio_models_20250531_175420', 'auto_list_lmstudio_models_20250531_181145', 'README', 'bible_translations', 'contextual_insights_integration', 'contextual_insights_optimization', 'contextual_insights_testing', 'dspy_mlflow_integration', 'esv_bible_processing', 'etl_pipeline', 'etl_rules', 'huggingface_dspy_integration', 'lm_studio_dspy_json_schema_integration', 'theological_terms', 'translation_variants', 'tvtms_expected_count', 'tvtms_txt_only', 'vector_search_server', 'api_standards', 'documentation_maintenance', 'lm_studio_dspy_integration', 'parser_strictness', 'rule_creation_guide', 'ai_response_protocol', 'server_startup_consistency']
2025-06-09 15:32:20,012 - INFO - Registering dynamic tools for 123 rules: ['canonical_database', 'comprehensive_semantic_search', 'database_access', 'db_test_skip', 'debug_hebrew_ot_words', 'documentation_system', 'documentation_usage', 'dspy_guidelines', 'environment_activation', 'esv_bible_processing', 'etl_parser_strictness', 'etl_rules', 'greek_morphology_count_tolerance', 'hebrew_rules', 'langchain_bible_integration', 'lexicon_validation', 'lm_studio_integration', 'logging_and_error_handling', 'logging_standards', 'mcp_rule_integration', 'model_validation', 'pandas_dataframe_type_enforcement', 'pandas_null_handling', 'path_standards', 'pgvector_semantic_search', 'port_configuration', 'psycopg3_only', 'public_domain_bible_processing', 'public_domain_bible_processing_new', 'rule_creation_guide', 'rule_management', 'rule_pruning', 'rule_template', 'single-source-of-truth', 'theological_terms', 'translation_validation', 'tvtms_database_handling', 'tvtms_expected_count', 'tvtms_parser_fixes', 'tvtms_txt_only', 'validate_data_types', 'when_to_create_rules', 'windows_batch_path_consistency', 'windows_python_utf8_fix', 'cursor_rules', 'documentation_usage', 'dspy_guidelines', 'README', 'rule_creation_guide', 'canonical_database', 'comprehensive_semantic_search', 'database_access', 'db_test_skip', 'debug_hebrew_ot_words', 'documentation_system', 'documentation_usage', 'dspy_guidelines', 'environment_activation', 'esv_bible_processing', 'etl_parser_strictness', 'etl_rules', 'greek_morphology_count_tolerance', 'hebrew_rules', 'langchain_bible_integration', 'lexicon_validation', 'lm_studio_integration', 'logging_and_error_handling', 'logging_standards', 'mcp_rule_integration', 'model_validation', 'pandas_dataframe_type_enforcement', 'pandas_null_handling', 'path_standards', 'pgvector_semantic_search', 'port_configuration', 'psycopg3_only', 'public_domain_bible_processing', 'public_domain_bible_processing_new', 'rule_creation_guide', 'rule_management', 'rule_pruning', 'rule_template', 'single-source-of-truth', 'theological_terms', 'translation_validation', 'tvtms_database_handling', 'tvtms_expected_count', 'tvtms_parser_fixes', 'tvtms_txt_only', 'validate_data_types', 'when_to_create_rules', 'windows_batch_path_consistency', 'windows_python_utf8_fix', 'cursor_rules', 'documentation_usage', 'dspy_guidelines', 'README', 'rule_creation_guide', 'auto_list_lmstudio_models_20250531_175420', 'auto_list_lmstudio_models_20250531_181145', 'README', 'bible_translations', 'contextual_insights_integration', 'contextual_insights_optimization', 'contextual_insights_testing', 'dspy_mlflow_integration', 'esv_bible_processing', 'etl_pipeline', 'etl_rules', 'huggingface_dspy_integration', 'lm_studio_dspy_json_schema_integration', 'theological_terms', 'translation_variants', 'tvtms_expected_count', 'tvtms_txt_only', 'vector_search_server', 'api_standards', 'documentation_maintenance', 'lm_studio_dspy_integration', 'parser_strictness', 'rule_creation_guide', 'ai_response_protocol', 'server_startup_consistency']
2025-06-09 15:32:20,012 - INFO - Rule canonical_database code_snippet: 'None'
2025-06-09 15:32:20,013 - INFO - Rule comprehensive_semantic_search code_snippet: 'None'
2025-06-09 15:32:20,013 - INFO - Rule database_access code_snippet: 'None'
2025-06-09 15:32:20,013 - INFO - Rule db_test_skip code_snippet: 'None'
2025-06-09 15:32:20,013 - INFO - Rule debug_hebrew_ot_words code_snippet: 'None'
2025-06-09 15:32:20,013 - INFO - Rule documentation_system code_snippet: 'def example_function():\n       return "This is an example"'
2025-06-09 15:32:20,013 - INFO - Rule documentation_usage code_snippet: '# See docs/rules/theological_terms.md for term definitions'
2025-06-09 15:32:20,013 - INFO - Rule dspy_guidelines code_snippet: '# Standard DSPy data collection pattern\nimport json\nimport os\n\ndef collect_dspy_examples(source_data, target_file, transform_fn):\n    """Collect DSPy examples from source data.\n    \n    Args:\n        source_data: Source data to transform\n        target_file: Path to save JSONL data\n        transform_fn: Function to transform source data to DSPy format\n    """\n    os.makedirs(os.path.dirname(target_file), exist_ok=True)\n    \n    examples = []\n    for item in source_data:\n        example = transform_fn(item)\n        if example:\n            examples.append(example)\n    \n    with open(target_file, \'w\', encoding=\'utf-8\') as f:\n        for example in examples:\n            f.write(json.dumps(example) + \'\\n\')\n            \n    print(f"Generated {len(examples)} DSPy examples in {target_file}")\n    return examples'
2025-06-09 15:32:20,013 - INFO - Rule environment_activation code_snippet: 'None'
2025-06-09 15:32:20,013 - INFO - Rule esv_bible_processing code_snippet: 'None'
2025-06-09 15:32:20,013 - INFO - Rule etl_parser_strictness code_snippet: 'from enum import Enum \n \nclass ParserStrictness(Enum): \n    STRICT = "strict"   # Fail on any issue \n    NORMAL = "normal"   # Default behavior \n    LENIENT = "lenient" # Best-effort parsing \n \ndef parse_file(file_path, strictness=ParserStrictness.NORMAL): \n    # Implementation that respects strictness level \n    # ...'
2025-06-09 15:32:20,014 - INFO - Rule etl_rules code_snippet: 'None'
2025-06-09 15:32:20,014 - INFO - Rule greek_morphology_count_tolerance code_snippet: 'def validate_greek_morphology_counts(df, feature_col="morphology"):\n    """\n    Validate Greek morphology counts against expected values\n    \n    Parameters:\n    -----------\n    df : DataFrame\n        DataFrame containing Greek NT morphology data\n    feature_col : str\n        Column containing morphology codes\n        \n    Returns:\n    --------\n    bool\n        Whether all counts are within acceptable tolerances\n    """\n    # Define expected counts and tolerances\n    expected_counts = {\n        "V": {"expected": 28957, "tolerance": 100, "name": "Verbs"},\n        "N": {"expected": 36502, "tolerance": 125, "name": "Nouns"},\n        "T": {"expected": 19782, "tolerance": 50, "name": "Articles"},\n        "P": {"expected": 12123, "tolerance": 40, "name": "Prepositions"},\n        "R": {"expected": 10935, "tolerance": 35, "name": "Personal Pronouns"},\n        "C": {"expected": 18338, "tolerance": 60, "name": "Conjunctions"},\n        "PT": {"expected": 6572, "tolerance": 25, "name": "Participles"}\n    }\n    \n    # Count actual occurrences\n    counts = {}\n    for code, info in expected_counts.items():\n        if code == "PT":\n            # Participles are usually marked with pattern like "V-PAP"\n            counts[code] = df[df[feature_col].str.contains(r"V-\\w{2}P", regex=True)].shape[0]\n        else:\n            counts[code] = df[df[feature_col].str.startswith(code)].shape[0]\n    \n    # Validate against acceptable tolerances\n    all_valid = True\n    for code, info in expected_counts.items():\n        actual = counts.get(code, 0)\n        diff = abs(actual - info["expected"])\n        percent_diff = (diff / info["expected"]) * 100\n        \n        if diff > info["tolerance"]:\n            if percent_diff > 1.0:\n                # Critical deviation\n                logger.error(\n                    f"CRITICAL: {info[\'name\']} count {actual} differs from expected {info[\'expected\']} "\n                    f"by {diff} ({percent_diff:.2f}%) - exceeds tolerance of {info[\'tolerance\']}"\n                )\n                all_valid = False\n            else:\n                # Warning level deviation\n                logger.warning(\n                    f"WARNING: {info[\'name\']} count {actual} differs from expected {info[\'expected\']} "\n                    f"by {diff} ({percent_diff:.2f}%) - exceeds tolerance of {info[\'tolerance\']}"\n                )\n        else:\n            logger.info(\n                f"VALID: {info[\'name\']} count {actual} (expected {info[\'expected\']}, "\n                f"diff: {diff}, {percent_diff:.2f}%)"\n            )\n    \n    return all_valid'
2025-06-09 15:32:20,014 - INFO - Rule hebrew_rules code_snippet: '# Pattern for extracting Strong\'s IDs from grammar_code\nimport re\n\ndef extract_strongs_id(grammar_code):\n    """Extract Strong\'s ID from grammar_code field."""\n    if not grammar_code:\n        return None\n        \n    # Try standard pattern in curly braces\n    match = re.search(r\'\\{(H[0-9]+[A-Za-z]?)\\}\', grammar_code)\n    if match:\n        return match.group(1)\n        \n    # Try prefix pattern\n    match = re.search(r\'H[0-9]+/\\{(H[0-9]+)\\}\', grammar_code)\n    if match:\n        return match.group(1)\n        \n    # Try alternate pattern\n    match = re.search(r\'\\{(H[0-9]+)\\}\\\\H[0-9]+\', grammar_code)\n    if match:\n        return match.group(1)\n        \n    return None'
2025-06-09 15:32:20,014 - INFO - Rule langchain_bible_integration code_snippet: 'from database.connection import get_db_connection\nfrom langchain.chains import SQLDatabaseChain\nfrom langchain.llms import OpenAI\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef create_bible_chain():\n    try:\n        conn = get_db_connection()\n        db = SQLDatabase.from_connection(conn)\n        llm = OpenAI()\n        chain = SQLDatabaseChain.from_llm(llm, db)\n        logger.info("Successfully created Bible LangChain")\n        return chain\n    except Exception as e:\n        logger.error(f"Failed to create Bible LangChain: {str(e)}")\n        raise\n\ndef enforce_langchain_rule(params=None):\n    try:\n        chain = create_bible_chain()\n        # Test the chain with a simple query\n        result = chain.run("SELECT verse_text FROM bible.verses WHERE book_name = \'John\' AND chapter_num = 3 AND verse_num = 16 LIMIT 1")\n        return {\n            "status": "success",\n            "message": "LangChain Bible integration verified",\n            "test_result": result\n        }\n    except Exception as e:\n        return {\n            "status": "error",\n            "message": f"LangChain Bible integration failed: {str(e)}"\n        }'
2025-06-09 15:32:20,014 - INFO - Rule lexicon_validation code_snippet: 'def validate_lexicon_completeness(conn):\n    """Validate that all Strong\'s IDs used in text have lexicon entries."""\n    # Hebrew validation\n    cursor = conn.cursor()\n    cursor.execute("""\n        SELECT DISTINCT h.strongs_id, COUNT(*) as occurrence_count\n        FROM bible.hebrew_ot_words h\n        LEFT JOIN bible.hebrew_entries l ON h.strongs_id = l.strongs_id\n        WHERE l.strongs_id IS NULL\n        GROUP BY h.strongs_id\n        ORDER BY occurrence_count DESC\n    """)\n    missing_hebrew = cursor.fetchall()\n    \n    # Greek validation\n    cursor.execute("""\n        SELECT DISTINCT g.strongs_id, COUNT(*) as occurrence_count\n        FROM bible.greek_nt_words g\n        LEFT JOIN bible.greek_entries l ON g.strongs_id = l.strongs_id\n        WHERE l.strongs_id IS NULL\n        GROUP BY g.strongs_id\n        ORDER BY occurrence_count DESC\n    """)\n    missing_greek = cursor.fetchall()\n    \n    return missing_hebrew, missing_greek'
2025-06-09 15:32:20,014 - INFO - Rule lm_studio_integration code_snippet: 'None'
2025-06-09 15:32:20,014 - INFO - Rule logging_and_error_handling code_snippet: 'None'
2025-06-09 15:32:20,014 - INFO - Rule logging_standards code_snippet: 'None'
2025-06-09 15:32:20,014 - INFO - Rule mcp_rule_integration code_snippet: 'None'
2025-06-09 15:32:20,014 - INFO - Rule model_validation code_snippet: 'None'
2025-06-09 15:32:20,014 - INFO - Rule pandas_dataframe_type_enforcement code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule pandas_null_handling code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule path_standards code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule pgvector_semantic_search code_snippet: 'python -m src.utils.test_vector_search\npython test_pgvector_search.py  # Custom test script'
2025-06-09 15:32:20,015 - INFO - Rule port_configuration code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule psycopg3_only code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule public_domain_bible_processing code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule public_domain_bible_processing_new code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule rule_creation_guide code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule rule_management code_snippet: 'None'
2025-06-09 15:32:20,015 - INFO - Rule rule_pruning code_snippet: 'None'
2025-06-09 15:32:20,016 - INFO - Rule rule_template code_snippet: 'None'
2025-06-09 15:32:20,016 - INFO - Rule single-source-of-truth code_snippet: 'None'
2025-06-09 15:32:20,016 - INFO - Rule theological_terms code_snippet: 'None'
2025-06-09 15:32:20,016 - INFO - Rule translation_validation code_snippet: 'None'
2025-06-09 15:32:20,016 - INFO - Rule tvtms_database_handling code_snippet: 'None'
2025-06-09 15:32:20,016 - INFO - Rule tvtms_expected_count code_snippet: 'None'
2025-06-09 15:32:20,016 - INFO - Rule tvtms_parser_fixes code_snippet: "def _parse_single_reference(self, reference, current_book=None):\n    # ...existing code...\n    \n    # Fix type handling - convert numeric strings to integers\n    if result.get('chapter') and result['chapter'].isdigit():\n        result['chapter'] = int(result['chapter'])\n    \n    if result.get('verse') and str(result['verse']).isdigit():\n        result['verse'] = int(result['verse'])\n    \n    # ...rest of the function..."
2025-06-09 15:32:20,016 - INFO - Rule tvtms_txt_only code_snippet: 'None'
2025-06-09 15:32:20,016 - INFO - Rule validate_data_types code_snippet: "params = params.get('data', {}); data = pd.DataFrame(params); expected_types = {'id': 'int64', 'value': 'object'}; mismatches = {col: {'expected': expected_types[col], 'actual': str(data[col].dtype)} for col in expected_types if col in data.columns and str(data[col].dtype) != expected_types[col]}; result = {'status': 'error' if mismatches else 'success', 'mismatches': mismatches if mismatches else 'None'}"
2025-06-09 15:32:20,016 - INFO - Rule when_to_create_rules code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule windows_batch_path_consistency code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule windows_python_utf8_fix code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule cursor_rules code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule documentation_usage code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule dspy_guidelines code_snippet: '# In DummyLM or real LM output construction\n        payload = {\n            "reasoning": "Dummy thought.",\n            "cross_references_json": json.dumps([{"ref": "...", "text": "..."}]) # The value is a string\n        }\n        final_lm_output_string = json.dumps(payload)'
2025-06-09 15:32:20,017 - INFO - Rule README code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule rule_creation_guide code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule canonical_database code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule comprehensive_semantic_search code_snippet: 'None'
2025-06-09 15:32:20,017 - INFO - Rule database_access code_snippet: 'None'
2025-06-09 15:32:20,018 - INFO - Rule db_test_skip code_snippet: 'None'
2025-06-09 15:32:20,018 - INFO - Rule debug_hebrew_ot_words code_snippet: 'None'
2025-06-09 15:32:20,018 - INFO - Rule documentation_system code_snippet: 'def example_function():\n       return "This is an example"'
2025-06-09 15:32:20,018 - INFO - Rule documentation_usage code_snippet: '# See docs/rules/theological_terms.md for term definitions'
2025-06-09 15:32:20,018 - INFO - Rule dspy_guidelines code_snippet: '# Standard DSPy data collection pattern\nimport json\nimport os\n\ndef collect_dspy_examples(source_data, target_file, transform_fn):\n    """Collect DSPy examples from source data.\n    \n    Args:\n        source_data: Source data to transform\n        target_file: Path to save JSONL data\n        transform_fn: Function to transform source data to DSPy format\n    """\n    os.makedirs(os.path.dirname(target_file), exist_ok=True)\n    \n    examples = []\n    for item in source_data:\n        example = transform_fn(item)\n        if example:\n            examples.append(example)\n    \n    with open(target_file, \'w\', encoding=\'utf-8\') as f:\n        for example in examples:\n            f.write(json.dumps(example) + \'\\n\')\n            \n    print(f"Generated {len(examples)} DSPy examples in {target_file}")\n    return examples'
2025-06-09 15:32:20,018 - INFO - Rule environment_activation code_snippet: 'None'
2025-06-09 15:32:20,018 - INFO - Rule esv_bible_processing code_snippet: 'None'
2025-06-09 15:32:20,018 - INFO - Rule etl_parser_strictness code_snippet: 'from enum import Enum \n \nclass ParserStrictness(Enum): \n    STRICT = "strict"   # Fail on any issue \n    NORMAL = "normal"   # Default behavior \n    LENIENT = "lenient" # Best-effort parsing \n \ndef parse_file(file_path, strictness=ParserStrictness.NORMAL): \n    # Implementation that respects strictness level \n    # ...'
2025-06-09 15:32:20,018 - INFO - Rule etl_rules code_snippet: 'None'
2025-06-09 15:32:20,018 - INFO - Rule greek_morphology_count_tolerance code_snippet: 'def validate_greek_morphology_counts(df, feature_col="morphology"):\n    """\n    Validate Greek morphology counts against expected values\n    \n    Parameters:\n    -----------\n    df : DataFrame\n        DataFrame containing Greek NT morphology data\n    feature_col : str\n        Column containing morphology codes\n        \n    Returns:\n    --------\n    bool\n        Whether all counts are within acceptable tolerances\n    """\n    # Define expected counts and tolerances\n    expected_counts = {\n        "V": {"expected": 28957, "tolerance": 100, "name": "Verbs"},\n        "N": {"expected": 36502, "tolerance": 125, "name": "Nouns"},\n        "T": {"expected": 19782, "tolerance": 50, "name": "Articles"},\n        "P": {"expected": 12123, "tolerance": 40, "name": "Prepositions"},\n        "R": {"expected": 10935, "tolerance": 35, "name": "Personal Pronouns"},\n        "C": {"expected": 18338, "tolerance": 60, "name": "Conjunctions"},\n        "PT": {"expected": 6572, "tolerance": 25, "name": "Participles"}\n    }\n    \n    # Count actual occurrences\n    counts = {}\n    for code, info in expected_counts.items():\n        if code == "PT":\n            # Participles are usually marked with pattern like "V-PAP"\n            counts[code] = df[df[feature_col].str.contains(r"V-\\w{2}P", regex=True)].shape[0]\n        else:\n            counts[code] = df[df[feature_col].str.startswith(code)].shape[0]\n    \n    # Validate against acceptable tolerances\n    all_valid = True\n    for code, info in expected_counts.items():\n        actual = counts.get(code, 0)\n        diff = abs(actual - info["expected"])\n        percent_diff = (diff / info["expected"]) * 100\n        \n        if diff > info["tolerance"]:\n            if percent_diff > 1.0:\n                # Critical deviation\n                logger.error(\n                    f"CRITICAL: {info[\'name\']} count {actual} differs from expected {info[\'expected\']} "\n                    f"by {diff} ({percent_diff:.2f}%) - exceeds tolerance of {info[\'tolerance\']}"\n                )\n                all_valid = False\n            else:\n                # Warning level deviation\n                logger.warning(\n                    f"WARNING: {info[\'name\']} count {actual} differs from expected {info[\'expected\']} "\n                    f"by {diff} ({percent_diff:.2f}%) - exceeds tolerance of {info[\'tolerance\']}"\n                )\n        else:\n            logger.info(\n                f"VALID: {info[\'name\']} count {actual} (expected {info[\'expected\']}, "\n                f"diff: {diff}, {percent_diff:.2f}%)"\n            )\n    \n    return all_valid'
2025-06-09 15:32:20,018 - INFO - Rule hebrew_rules code_snippet: '# Pattern for extracting Strong\'s IDs from grammar_code\nimport re\n\ndef extract_strongs_id(grammar_code):\n    """Extract Strong\'s ID from grammar_code field."""\n    if not grammar_code:\n        return None\n        \n    # Try standard pattern in curly braces\n    match = re.search(r\'\\{(H[0-9]+[A-Za-z]?)\\}\', grammar_code)\n    if match:\n        return match.group(1)\n        \n    # Try prefix pattern\n    match = re.search(r\'H[0-9]+/\\{(H[0-9]+)\\}\', grammar_code)\n    if match:\n        return match.group(1)\n        \n    # Try alternate pattern\n    match = re.search(r\'\\{(H[0-9]+)\\}\\\\H[0-9]+\', grammar_code)\n    if match:\n        return match.group(1)\n        \n    return None'
2025-06-09 15:32:20,019 - INFO - Rule langchain_bible_integration code_snippet: 'from database.connection import get_db_connection\nfrom langchain.chains import SQLDatabaseChain\nfrom langchain.llms import OpenAI\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef create_bible_chain():\n    try:\n        conn = get_db_connection()\n        db = SQLDatabase.from_connection(conn)\n        llm = OpenAI()\n        chain = SQLDatabaseChain.from_llm(llm, db)\n        logger.info("Successfully created Bible LangChain")\n        return chain\n    except Exception as e:\n        logger.error(f"Failed to create Bible LangChain: {str(e)}")\n        raise\n\ndef enforce_langchain_rule(params=None):\n    try:\n        chain = create_bible_chain()\n        # Test the chain with a simple query\n        result = chain.run("SELECT verse_text FROM bible.verses WHERE book_name = \'John\' AND chapter_num = 3 AND verse_num = 16 LIMIT 1")\n        return {\n            "status": "success",\n            "message": "LangChain Bible integration verified",\n            "test_result": result\n        }\n    except Exception as e:\n        return {\n            "status": "error",\n            "message": f"LangChain Bible integration failed: {str(e)}"\n        }'
2025-06-09 15:32:20,019 - INFO - Rule lexicon_validation code_snippet: 'def validate_lexicon_completeness(conn):\n    """Validate that all Strong\'s IDs used in text have lexicon entries."""\n    # Hebrew validation\n    cursor = conn.cursor()\n    cursor.execute("""\n        SELECT DISTINCT h.strongs_id, COUNT(*) as occurrence_count\n        FROM bible.hebrew_ot_words h\n        LEFT JOIN bible.hebrew_entries l ON h.strongs_id = l.strongs_id\n        WHERE l.strongs_id IS NULL\n        GROUP BY h.strongs_id\n        ORDER BY occurrence_count DESC\n    """)\n    missing_hebrew = cursor.fetchall()\n    \n    # Greek validation\n    cursor.execute("""\n        SELECT DISTINCT g.strongs_id, COUNT(*) as occurrence_count\n        FROM bible.greek_nt_words g\n        LEFT JOIN bible.greek_entries l ON g.strongs_id = l.strongs_id\n        WHERE l.strongs_id IS NULL\n        GROUP BY g.strongs_id\n        ORDER BY occurrence_count DESC\n    """)\n    missing_greek = cursor.fetchall()\n    \n    return missing_hebrew, missing_greek'
2025-06-09 15:32:20,019 - INFO - Rule lm_studio_integration code_snippet: 'None'
2025-06-09 15:32:20,019 - INFO - Rule logging_and_error_handling code_snippet: 'None'
2025-06-09 15:32:20,019 - INFO - Rule logging_standards code_snippet: 'None'
2025-06-09 15:32:20,019 - INFO - Rule mcp_rule_integration code_snippet: 'None'
2025-06-09 15:32:20,019 - INFO - Rule model_validation code_snippet: 'None'
2025-06-09 15:32:20,019 - INFO - Rule pandas_dataframe_type_enforcement code_snippet: 'None'
2025-06-09 15:32:20,019 - INFO - Rule pandas_null_handling code_snippet: 'None'
2025-06-09 15:32:20,019 - INFO - Rule path_standards code_snippet: 'None'
2025-06-09 15:32:20,019 - INFO - Rule pgvector_semantic_search code_snippet: 'python -m src.utils.test_vector_search\npython test_pgvector_search.py  # Custom test script'
2025-06-09 15:32:20,020 - INFO - Rule port_configuration code_snippet: 'None'
2025-06-09 15:32:20,020 - INFO - Rule psycopg3_only code_snippet: 'None'
2025-06-09 15:32:20,020 - INFO - Rule public_domain_bible_processing code_snippet: 'None'
2025-06-09 15:32:20,020 - INFO - Rule public_domain_bible_processing_new code_snippet: 'None'
2025-06-09 15:32:20,020 - INFO - Rule rule_creation_guide code_snippet: 'None'
2025-06-09 15:32:20,020 - INFO - Rule rule_management code_snippet: 'None'
2025-06-09 15:32:20,021 - INFO - Rule rule_pruning code_snippet: 'None'
2025-06-09 15:32:20,021 - INFO - Rule rule_template code_snippet: 'None'
2025-06-09 15:32:20,021 - INFO - Rule single-source-of-truth code_snippet: 'None'
2025-06-09 15:32:20,021 - INFO - Rule theological_terms code_snippet: 'None'
2025-06-09 15:32:20,021 - INFO - Rule translation_validation code_snippet: 'None'
2025-06-09 15:32:20,021 - INFO - Rule tvtms_database_handling code_snippet: 'None'
2025-06-09 15:32:20,021 - INFO - Rule tvtms_expected_count code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule tvtms_parser_fixes code_snippet: "def _parse_single_reference(self, reference, current_book=None):\n    # ...existing code...\n    \n    # Fix type handling - convert numeric strings to integers\n    if result.get('chapter') and result['chapter'].isdigit():\n        result['chapter'] = int(result['chapter'])\n    \n    if result.get('verse') and str(result['verse']).isdigit():\n        result['verse'] = int(result['verse'])\n    \n    # ...rest of the function..."
2025-06-09 15:32:20,022 - INFO - Rule tvtms_txt_only code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule validate_data_types code_snippet: "params = params.get('data', {}); data = pd.DataFrame(params); expected_types = {'id': 'int64', 'value': 'object'}; mismatches = {col: {'expected': expected_types[col], 'actual': str(data[col].dtype)} for col in expected_types if col in data.columns and str(data[col].dtype) != expected_types[col]}; result = {'status': 'error' if mismatches else 'success', 'mismatches': mismatches if mismatches else 'None'}"
2025-06-09 15:32:20,022 - INFO - Rule when_to_create_rules code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule windows_batch_path_consistency code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule windows_python_utf8_fix code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule cursor_rules code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule documentation_usage code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule dspy_guidelines code_snippet: '# In DummyLM or real LM output construction\n        payload = {\n            "reasoning": "Dummy thought.",\n            "cross_references_json": json.dumps([{"ref": "...", "text": "..."}]) # The value is a string\n        }\n        final_lm_output_string = json.dumps(payload)'
2025-06-09 15:32:20,022 - INFO - Rule README code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule rule_creation_guide code_snippet: 'None'
2025-06-09 15:32:20,022 - INFO - Rule auto_list_lmstudio_models_20250531_175420 code_snippet: 'params = {}\nresult = {"status": "success", "models": [{"id": "meta-llama-3.1-8b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-bge-m3", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-nomic-embed-text-v1.5@q4_k_m", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.2-3b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "google/gemma-3-12b", "object": "model", "owned_by": "organization_owner"}, {"id": "google/gemma-3-4b", "object": "model", "owned_by": "organization_owner"}, {"id": "ibm/granite-3.1-8b", "object": "model", "owned_by": "organization_owner"}, {"id": "microsoft/phi-4-mini-reasoning", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen/qwen3-8b", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-bge-reranker-v2-m3", "object": "model", "owned_by": "organization_owner"}, {"id": "nvidia_llama-3.1-nemotron-nano-8b-v1", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-mxbai-embed-large-v1", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-nomic-embed-text-v2-moe", "object": "model", "owned_by": "organization_owner"}, {"id": "mistralai_mistral-small-3.1-24b-instruct-2503", "object": "model", "owned_by": "organization_owner"}, {"id": "mistral-7b-instruct-sql-ian", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.2-8x3b-moe-dark-champion-instruct-uncensored-abliterated-18.4b", "object": "model", "owned_by": "organization_owner"}, {"id": "wizardlm-13b-uncensored", "object": "model", "owned_by": "organization_owner"}, {"id": "deepseek-r1-distill-qwen-1.5b", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-0.5b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "mistral-nemo-instruct-2407@q4_k_m", "object": "model", "owned_by": "organization_owner"}, {"id": "mistral-nemo-instruct-2407@q6_k", "object": "model", "owned_by": "organization_owner"}, {"id": "darkidol-llama-3.1-8b-instruct-1.2-uncensored", "object": "model", "owned_by": "organization_owner"}, {"id": "gguf-flan-t5-small", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-7b-instruct-1m@q4_k_m", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-7b-instruct-1m@q6_k", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.2-11b-vision-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.1-8b-instruct-spatial-sql-1.0", "object": "model", "owned_by": "organization_owner"}, {"id": "meta-llama-3.1-8b-text-to-sql", "object": "model", "owned_by": "organization_owner"}, {"id": "phi-4-14b-instruct-sft", "object": "model", "owned_by": "organization_owner"}, {"id": "deepseek-r1-distill-qwen-32b", "object": "model", "owned_by": "organization_owner"}, {"id": "qwenvergence-14b-v10", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-14b-deepseek-r1-1m-uncensored", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-coder-14b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "unsloth/deepseek-r1-distill-qwen-14b", "object": "model", "owned_by": "organization_owner"}, {"id": "mistral-7b-instruct-v0.3", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.2-3b-instruct-medicalqa-i1", "object": "model", "owned_by": "organization_owner"}, {"id": "lmstudio-community/deepseek-r1-distill-qwen-14b", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-14b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "nvidia.mistral-nemo-minitron-8b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3-nvidia-chatqa-1.5-8b", "object": "model", "owned_by": "organization_owner"}, {"id": "yi-coder-9b-chat", "object": "model", "owned_by": "organization_owner"}, {"id": "granite-3.1-8b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-nomic-embed-text-v1.5@q8_0", "object": "model", "owned_by": "organization_owner"}]}'
2025-06-09 15:32:20,023 - INFO - Rule auto_list_lmstudio_models_20250531_181145 code_snippet: 'params = {}\nresult = {"status": "success", "models": [{"id": "meta-llama-3.1-8b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-bge-m3", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-nomic-embed-text-v1.5@q4_k_m", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.2-3b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "google/gemma-3-12b", "object": "model", "owned_by": "organization_owner"}, {"id": "google/gemma-3-4b", "object": "model", "owned_by": "organization_owner"}, {"id": "ibm/granite-3.1-8b", "object": "model", "owned_by": "organization_owner"}, {"id": "microsoft/phi-4-mini-reasoning", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen/qwen3-8b", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-bge-reranker-v2-m3", "object": "model", "owned_by": "organization_owner"}, {"id": "nvidia_llama-3.1-nemotron-nano-8b-v1", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-mxbai-embed-large-v1", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-nomic-embed-text-v2-moe", "object": "model", "owned_by": "organization_owner"}, {"id": "mistralai_mistral-small-3.1-24b-instruct-2503", "object": "model", "owned_by": "organization_owner"}, {"id": "mistral-7b-instruct-sql-ian", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.2-8x3b-moe-dark-champion-instruct-uncensored-abliterated-18.4b", "object": "model", "owned_by": "organization_owner"}, {"id": "wizardlm-13b-uncensored", "object": "model", "owned_by": "organization_owner"}, {"id": "deepseek-r1-distill-qwen-1.5b", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-0.5b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "mistral-nemo-instruct-2407@q4_k_m", "object": "model", "owned_by": "organization_owner"}, {"id": "mistral-nemo-instruct-2407@q6_k", "object": "model", "owned_by": "organization_owner"}, {"id": "darkidol-llama-3.1-8b-instruct-1.2-uncensored", "object": "model", "owned_by": "organization_owner"}, {"id": "gguf-flan-t5-small", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-7b-instruct-1m@q4_k_m", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-7b-instruct-1m@q6_k", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.2-11b-vision-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.1-8b-instruct-spatial-sql-1.0", "object": "model", "owned_by": "organization_owner"}, {"id": "meta-llama-3.1-8b-text-to-sql", "object": "model", "owned_by": "organization_owner"}, {"id": "phi-4-14b-instruct-sft", "object": "model", "owned_by": "organization_owner"}, {"id": "deepseek-r1-distill-qwen-32b", "object": "model", "owned_by": "organization_owner"}, {"id": "qwenvergence-14b-v10", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-14b-deepseek-r1-1m-uncensored", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-coder-14b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "unsloth/deepseek-r1-distill-qwen-14b", "object": "model", "owned_by": "organization_owner"}, {"id": "mistral-7b-instruct-v0.3", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3.2-3b-instruct-medicalqa-i1", "object": "model", "owned_by": "organization_owner"}, {"id": "lmstudio-community/deepseek-r1-distill-qwen-14b", "object": "model", "owned_by": "organization_owner"}, {"id": "qwen2.5-14b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "nvidia.mistral-nemo-minitron-8b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "llama-3-nvidia-chatqa-1.5-8b", "object": "model", "owned_by": "organization_owner"}, {"id": "yi-coder-9b-chat", "object": "model", "owned_by": "organization_owner"}, {"id": "granite-3.1-8b-instruct", "object": "model", "owned_by": "organization_owner"}, {"id": "text-embedding-nomic-embed-text-v1.5@q8_0", "object": "model", "owned_by": "organization_owner"}]}'
2025-06-09 15:32:20,023 - INFO - Rule README code_snippet: 'None'
2025-06-09 15:32:20,023 - INFO - Rule bible_translations code_snippet: '# Loading a verse from a specific translation\ndef get_verse(book, chapter, verse, translation="KJV"):\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    \n    query = """\n        SELECT verse_text \n        FROM bible.verses \n        WHERE book_name = %s \n        AND chapter_num = %s \n        AND verse_num = %s \n        AND translation_source = %s\n    """\n    \n    cursor.execute(query, (book, chapter, verse, translation))\n    result = cursor.fetchone()\n    \n    conn.close()\n    return result[0] if result else None'
2025-06-09 15:32:20,023 - INFO - Rule contextual_insights_integration code_snippet: 'None'
2025-06-09 15:32:20,023 - INFO - Rule contextual_insights_optimization code_snippet: 'import dspy\n     import dspy_json_patch\n     dspy_json_patch.apply_patches()\n     dspy.settings.experimental = True'
2025-06-09 15:32:20,023 - INFO - Rule contextual_insights_testing code_snippet: 'None'
2025-06-09 15:32:20,023 - INFO - Rule dspy_mlflow_integration code_snippet: 'None'
2025-06-09 15:32:20,023 - INFO - Rule esv_bible_processing code_snippet: 'None'
2025-06-09 15:32:20,023 - INFO - Rule etl_pipeline code_snippet: 'None'
2025-06-09 15:32:20,024 - INFO - Rule etl_rules code_snippet: 'None'
2025-06-09 15:32:20,024 - INFO - Rule huggingface_dspy_integration code_snippet: 'None'
2025-06-09 15:32:20,024 - INFO - Rule lm_studio_dspy_json_schema_integration code_snippet: 'import dspy\nimport dspy_json_patch\ndspy_json_patch.apply_patches()\ndspy.settings.experimental = True\nlm = dspy.LM(f"openai/{model_name}", api_base=..., api_key=...)\ndspy.settings.configure(lm=lm, rm=...)'
2025-06-09 15:32:20,024 - INFO - Rule theological_terms code_snippet: 'None'
2025-06-09 15:32:20,024 - INFO - Rule translation_variants code_snippet: "insights = query_lm_studio(prompt)\ninsights['translation_variants'] = get_bible_db_translations('John 3:16')"
2025-06-09 15:32:20,025 - INFO - Rule tvtms_expected_count code_snippet: 'None'
2025-06-09 15:32:20,025 - INFO - Rule tvtms_txt_only code_snippet: 'None'
2025-06-09 15:32:20,025 - INFO - Rule vector_search_server code_snippet: 'None'
2025-06-09 15:32:20,025 - INFO - Rule api_standards code_snippet: 'None'
2025-06-09 15:32:20,025 - INFO - Rule documentation_maintenance code_snippet: 'None'
2025-06-09 15:32:20,025 - INFO - Rule lm_studio_dspy_integration code_snippet: 'response_format = {\n    "type": "json_schema",\n    "json_schema": {\n        "schema": {\n            "type": "object",\n            "properties": {\n                "field_name": {\n                    "type": "string",\n                    "description": "Description of the field"\n                }\n            },\n            "required": ["field_name"]\n        }\n    }\n}'
2025-06-09 15:32:20,025 - INFO - Rule parser_strictness code_snippet: 'None'
2025-06-09 15:32:20,025 - INFO - Rule rule_creation_guide code_snippet: 'None'
2025-06-09 15:32:20,025 - INFO - Rule ai_response_protocol code_snippet: 'None'
2025-06-09 15:32:20,025 - INFO - Rule server_startup_consistency code_snippet: 'None'
2025-06-09 15:32:20,026 - INFO - Registered 64 dynamic rule tools: ['enforce_rule_canonical_database', 'enforce_rule_comprehensive_semantic_search', 'enforce_rule_database_access', 'enforce_rule_db_test_skip', 'enforce_rule_debug_hebrew_ot_words', 'enforce_rule_documentation_system', 'enforce_rule_documentation_usage', 'enforce_rule_dspy_guidelines', 'enforce_rule_environment_activation', 'enforce_rule_esv_bible_processing', 'enforce_rule_etl_parser_strictness', 'enforce_rule_etl_rules', 'enforce_rule_greek_morphology_count_tolerance', 'enforce_rule_hebrew_rules', 'enforce_rule_langchain_bible_integration', 'enforce_rule_lexicon_validation', 'enforce_rule_lm_studio_integration', 'enforce_rule_logging_and_error_handling', 'enforce_rule_logging_standards', 'enforce_rule_mcp_rule_integration', 'enforce_rule_model_validation', 'enforce_rule_pandas_dataframe_type_enforcement', 'enforce_rule_pandas_null_handling', 'enforce_rule_path_standards', 'enforce_rule_pgvector_semantic_search', 'enforce_rule_port_configuration', 'enforce_rule_psycopg3_only', 'enforce_rule_public_domain_bible_processing', 'enforce_rule_public_domain_bible_processing_new', 'enforce_rule_rule_creation_guide', 'enforce_rule_rule_management', 'enforce_rule_rule_pruning', 'enforce_rule_rule_template', 'enforce_rule_single-source-of-truth', 'enforce_rule_theological_terms', 'enforce_rule_translation_validation', 'enforce_rule_tvtms_database_handling', 'enforce_rule_tvtms_expected_count', 'enforce_rule_tvtms_parser_fixes', 'enforce_rule_tvtms_txt_only', 'enforce_rule_validate_data_types', 'enforce_rule_when_to_create_rules', 'enforce_rule_windows_batch_path_consistency', 'enforce_rule_windows_python_utf8_fix', 'enforce_rule_cursor_rules', 'enforce_rule_README', 'enforce_rule_auto_list_lmstudio_models_20250531_175420', 'enforce_rule_auto_list_lmstudio_models_20250531_181145', 'enforce_rule_bible_translations', 'enforce_rule_contextual_insights_integration', 'enforce_rule_contextual_insights_optimization', 'enforce_rule_contextual_insights_testing', 'enforce_rule_dspy_mlflow_integration', 'enforce_rule_etl_pipeline', 'enforce_rule_huggingface_dspy_integration', 'enforce_rule_lm_studio_dspy_json_schema_integration', 'enforce_rule_translation_variants', 'enforce_rule_vector_search_server', 'enforce_rule_api_standards', 'enforce_rule_documentation_maintenance', 'enforce_rule_lm_studio_dspy_integration', 'enforce_rule_parser_strictness', 'enforce_rule_ai_response_protocol', 'enforce_rule_server_startup_consistency']
2025-06-09 15:32:20,026 - INFO - Starting in MCP mode for Cursor integration
2025-06-09 15:32:20,027 - INFO - Starting MCP stdin/stdout handler for Cursor integration
2025-06-09 15:32:20,029 - INFO - MCP Request: {'method': 'initialize', 'params': {'protocolVersion': '2025-03-26', 'capabilities': {'tools': True, 'prompts': False, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, 'jsonrpc': '2.0', 'id': 0}
2025-06-09 15:32:20,029 - INFO - MCP Response: {'jsonrpc': '2.0', 'id': 0, 'result': {'protocolVersion': '2024-11-05', 'capabilities': {'tools': {}}, 'serverInfo': {'name': 'bible-scholar-mcp', 'version': '1.0.0'}}}
2025-06-09 15:32:20,035 - INFO - MCP Request: {'method': 'notifications/initialized', 'jsonrpc': '2.0'}
2025-06-09 15:32:20,035 - INFO - MCP Response: {'jsonrpc': '2.0', 'id': None, 'error': {'code': -32601, 'message': 'Method not found: notifications/initialized'}}
2025-06-09 15:32:20,041 - INFO - MCP Request: {'method': 'tools/list', 'jsonrpc': '2.0', 'id': 1}
2025-06-09 15:32:20,041 - INFO - MCP Response: {'jsonrpc': '2.0', 'id': 1, 'result': {'tools': [{'name': 'check_ports', 'description': 'Execute check_ports tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'terminate_processes', 'description': 'Execute terminate_processes tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'verify_data', 'description': 'Execute verify_data tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'run_query', 'description': 'Execute run_query tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'suggest_incremental_change', 'description': 'Execute suggest_incremental_change tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'run_test', 'description': 'Execute run_test tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'get_file_context', 'description': 'Execute get_file_context tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'update_docs', 'description': 'Execute update_docs tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'log_action', 'description': 'Execute log_action tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'normalize_reference', 'description': 'Execute normalize_reference tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_etl_guidelines', 'description': 'Execute enforce_etl_guidelines tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'check_pandas_nulls', 'description': 'Execute check_pandas_nulls tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_pandas_types', 'description': 'Execute enforce_pandas_types tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'validate_tvtms_counts', 'description': 'Execute validate_tvtms_counts tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'check_tvtms_format', 'description': 'Execute check_tvtms_format tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'validate_json_schema', 'description': 'Execute validate_json_schema tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'semantic_search', 'description': 'Execute semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'list_lmstudio_models', 'description': 'Execute list_lmstudio_models tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_canonical_database', 'description': 'Execute enforce_rule_canonical_database tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_comprehensive_semantic_search', 'description': 'Execute enforce_rule_comprehensive_semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_database_access', 'description': 'Execute enforce_rule_database_access tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_db_test_skip', 'description': 'Execute enforce_rule_db_test_skip tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_debug_hebrew_ot_words', 'description': 'Execute enforce_rule_debug_hebrew_ot_words tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_system', 'description': 'Execute enforce_rule_documentation_system tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_usage', 'description': 'Execute enforce_rule_documentation_usage tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_dspy_guidelines', 'description': 'Execute enforce_rule_dspy_guidelines tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_environment_activation', 'description': 'Execute enforce_rule_environment_activation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_esv_bible_processing', 'description': 'Execute enforce_rule_esv_bible_processing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_parser_strictness', 'description': 'Execute enforce_rule_etl_parser_strictness tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_rules', 'description': 'Execute enforce_rule_etl_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_greek_morphology_count_tolerance', 'description': 'Execute enforce_rule_greek_morphology_count_tolerance tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_hebrew_rules', 'description': 'Execute enforce_rule_hebrew_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_langchain_bible_integration', 'description': 'Execute enforce_rule_langchain_bible_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lexicon_validation', 'description': 'Execute enforce_rule_lexicon_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_integration', 'description': 'Execute enforce_rule_lm_studio_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_logging_and_error_handling', 'description': 'Execute enforce_rule_logging_and_error_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_logging_standards', 'description': 'Execute enforce_rule_logging_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_mcp_rule_integration', 'description': 'Execute enforce_rule_mcp_rule_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_model_validation', 'description': 'Execute enforce_rule_model_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pandas_dataframe_type_enforcement', 'description': 'Execute enforce_rule_pandas_dataframe_type_enforcement tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pandas_null_handling', 'description': 'Execute enforce_rule_pandas_null_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_path_standards', 'description': 'Execute enforce_rule_path_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_pgvector_semantic_search', 'description': 'Execute enforce_rule_pgvector_semantic_search tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_port_configuration', 'description': 'Execute enforce_rule_port_configuration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_psycopg3_only', 'description': 'Execute enforce_rule_psycopg3_only tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_public_domain_bible_processing', 'description': 'Execute enforce_rule_public_domain_bible_processing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_public_domain_bible_processing_new', 'description': 'Execute enforce_rule_public_domain_bible_processing_new tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_creation_guide', 'description': 'Execute enforce_rule_rule_creation_guide tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_management', 'description': 'Execute enforce_rule_rule_management tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_pruning', 'description': 'Execute enforce_rule_rule_pruning tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_rule_template', 'description': 'Execute enforce_rule_rule_template tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_single-source-of-truth', 'description': 'Execute enforce_rule_single-source-of-truth tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_theological_terms', 'description': 'Execute enforce_rule_theological_terms tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_translation_validation', 'description': 'Execute enforce_rule_translation_validation tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_database_handling', 'description': 'Execute enforce_rule_tvtms_database_handling tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_expected_count', 'description': 'Execute enforce_rule_tvtms_expected_count tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_parser_fixes', 'description': 'Execute enforce_rule_tvtms_parser_fixes tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_tvtms_txt_only', 'description': 'Execute enforce_rule_tvtms_txt_only tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_validate_data_types', 'description': 'Execute enforce_rule_validate_data_types tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_when_to_create_rules', 'description': 'Execute enforce_rule_when_to_create_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_windows_batch_path_consistency', 'description': 'Execute enforce_rule_windows_batch_path_consistency tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_windows_python_utf8_fix', 'description': 'Execute enforce_rule_windows_python_utf8_fix tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_cursor_rules', 'description': 'Execute enforce_rule_cursor_rules tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_README', 'description': 'Execute enforce_rule_README tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_auto_list_lmstudio_models_20250531_175420', 'description': 'Execute enforce_rule_auto_list_lmstudio_models_20250531_175420 tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_auto_list_lmstudio_models_20250531_181145', 'description': 'Execute enforce_rule_auto_list_lmstudio_models_20250531_181145 tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_bible_translations', 'description': 'Execute enforce_rule_bible_translations tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_integration', 'description': 'Execute enforce_rule_contextual_insights_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_optimization', 'description': 'Execute enforce_rule_contextual_insights_optimization tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_contextual_insights_testing', 'description': 'Execute enforce_rule_contextual_insights_testing tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_dspy_mlflow_integration', 'description': 'Execute enforce_rule_dspy_mlflow_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_etl_pipeline', 'description': 'Execute enforce_rule_etl_pipeline tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_huggingface_dspy_integration', 'description': 'Execute enforce_rule_huggingface_dspy_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_dspy_json_schema_integration', 'description': 'Execute enforce_rule_lm_studio_dspy_json_schema_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_translation_variants', 'description': 'Execute enforce_rule_translation_variants tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_vector_search_server', 'description': 'Execute enforce_rule_vector_search_server tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_api_standards', 'description': 'Execute enforce_rule_api_standards tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_documentation_maintenance', 'description': 'Execute enforce_rule_documentation_maintenance tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_lm_studio_dspy_integration', 'description': 'Execute enforce_rule_lm_studio_dspy_integration tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_parser_strictness', 'description': 'Execute enforce_rule_parser_strictness tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_ai_response_protocol', 'description': 'Execute enforce_rule_ai_response_protocol tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}, {'name': 'enforce_rule_server_startup_consistency', 'description': 'Execute enforce_rule_server_startup_consistency tool', 'inputSchema': {'type': 'object', 'properties': {'params': {'type': 'object'}}}}]}}
2025-06-09 15:32:27,405 - INFO - MCP Request: {'method': 'tools/list', 'jsonrpc': '2.0', 'id': 2}
