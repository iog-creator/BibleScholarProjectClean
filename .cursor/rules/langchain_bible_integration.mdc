---
description:
globs:
alwaysApply: false
---
alwaysApply: true
---

---
type: always
title: LangChain Bible Database Integration
description: Standards for integrating LangChain with the Bible database
globs:
  - "src/langchain/**/*.py"
  - "src/api/langchain/**/*.py"
  - "tests/unit/test_langchain_*.py"
alwaysApply: true
---

# LangChain Bible Database Integration Rules

1. All LangChain interactions with biblical data MUST use the bible_db database as the single source of truth
2. Database connections must be managed through the database module's connection utility
3. All queries must use parameterized queries to prevent SQL injection
4. LangChain chains must be configured to use the bible_db connection pool
5. All biblical text retrieval must go through the canonical database tables
6. Semantic search capabilities must integrate with existing pgvector implementation
7. Error handling must follow the logging_and_error_handling standards
8. All LangChain components must be properly documented following documentation_usage standards
9. Database connections must be properly closed after use
10. All LangChain interactions must be logged according to logging_standards

Code snippet for MCP server integration:
```python
from database.connection import get_db_connection
from langchain.chains import SQLDatabaseChain
from langchain.llms import OpenAI
import logging

logger = logging.getLogger(__name__)

def create_bible_chain():
    try:
        conn = get_db_connection()
        db = SQLDatabase.from_connection(conn)
        llm = OpenAI()
        chain = SQLDatabaseChain.from_llm(llm, db)
        logger.info("Successfully created Bible LangChain")
        return chain
    except Exception as e:
        logger.error(f"Failed to create Bible LangChain: {str(e)}")
        raise

def enforce_langchain_rule(params=None):
    try:
        chain = create_bible_chain()
        # Test the chain with a simple query
        result = chain.run("SELECT verse_text FROM bible.verses WHERE book_name = 'John' AND chapter_num = 3 AND verse_num = 16 LIMIT 1")
        return {
            "status": "success",
            "message": "LangChain Bible integration verified",
            "test_result": result
        }
    except Exception as e:
        return {
            "status": "error",
            "message": f"LangChain Bible integration failed: {str(e)}"
        }
```
